{"version":3,"sources":["client-test.js"],"names":["test","require","pixelgram","nock","fixtures","options","endpoints","pictures","users","auth","beforeEach","t","context","client","createClient","is","getPicture","savePicture","likePicture","listPictures","listPicturesByTag","saveUser","getUser","image","getImage","get","publicId","reply","result","deepEqual"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,YAAYD,QAAQ,KAAR,CAAlB;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,MAAMG,WAAWH,QAAQ,YAAR,CAAjB;;AAEA,IAAII,UAAU;AACZC,aAAW;AACTC,cAAU,+BADD;AAETC,WAAO,4BAFE;AAGTC,UAAM;AAHG;AADC,CAAd;;AAQAT,KAAKU,UAAL,CAAgBC,KAAK;AACnBA,IAAEC,OAAF,CAAUC,MAAV,GAAmBX,UAAUY,YAAV,CAAuBT,OAAvB,CAAnB;AACD,CAFD;;AAIAL,KAAK,QAAL,EAAeW,KAAK;AAClB,QAAME,SAASX,UAAUY,YAAV,EAAf;;AAEAH,IAAEI,EAAF,CAAK,OAAOF,OAAOG,UAAnB,EAA+B,UAA/B;AACAL,IAAEI,EAAF,CAAK,OAAOF,OAAOI,WAAnB,EAAgC,UAAhC;AACAN,IAAEI,EAAF,CAAK,OAAOF,OAAOK,WAAnB,EAAgC,UAAhC;AACAP,IAAEI,EAAF,CAAK,OAAOF,OAAOM,YAAnB,EAAiC,UAAjC;AACAR,IAAEI,EAAF,CAAK,OAAOF,OAAOO,iBAAnB,EAAsC,UAAtC;AACAT,IAAEI,EAAF,CAAK,OAAOF,OAAOQ,QAAnB,EAA6B,UAA7B;AACAV,IAAEI,EAAF,CAAK,OAAOF,OAAOS,OAAnB,EAA4B,UAA5B;AACAX,IAAEI,EAAF,CAAK,OAAOF,OAAOJ,IAAnB,EAAyB,UAAzB;AACD,CAXD;;AAaAT,KAAK,YAAL;AAAA,+BAAmB,WAAMW,CAAN,EAAW;AAC5B,UAAME,SAASF,EAAEC,OAAF,CAAUC,MAAzB;;AAEA,QAAIU,QAAQnB,SAASoB,QAAT,EAAZ;;AAEArB,SAAKE,QAAQC,SAAR,CAAkBC,QAAvB,EACGkB,GADH,CACQ,IAAGF,MAAMG,QAAS,EAD1B,EAEGC,KAFH,CAES,GAFT,EAEcJ,KAFd;;AAIA,QAAIK,SAAS,MAAMf,OAAOG,UAAP,CAAkBO,MAAMG,QAAxB,CAAnB;AACAf,MAAEkB,SAAF,CAAYN,KAAZ,EAAmBK,MAAnB;AACD,GAXD;;AAAA;AAAA;AAAA;AAAA","file":"client-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst pixelgram = require('../')\nconst nock = require('nock')\nconst fixtures = require('./fixtures')\n\nlet options = {\n  endpoints: {\n    pictures: 'http://pixelgram.test/picture',\n    users: 'http://pixelgram.test/user',\n    auth: 'http://pixelgram.test/auth'\n  }\n}\n\ntest.beforeEach(t => {\n  t.context.client = pixelgram.createClient(options)\n})\n\ntest('client', t => {\n  const client = pixelgram.createClient()\n\n  t.is(typeof client.getPicture, 'function')\n  t.is(typeof client.savePicture, 'function')\n  t.is(typeof client.likePicture, 'function')\n  t.is(typeof client.listPictures, 'function')\n  t.is(typeof client.listPicturesByTag, 'function')\n  t.is(typeof client.saveUser, 'function')\n  t.is(typeof client.getUser, 'function')\n  t.is(typeof client.auth, 'function')\n})\n\ntest('getPicture', async t => {\n  const client = t.context.client\n\n  let image = fixtures.getImage()\n\n  nock(options.endpoints.pictures)\n    .get(`/${image.publicId}`)\n    .reply(200, image)\n\n  let result = await client.getPicture(image.publicId)\n  t.deepEqual(image, result)\n})\n"]}