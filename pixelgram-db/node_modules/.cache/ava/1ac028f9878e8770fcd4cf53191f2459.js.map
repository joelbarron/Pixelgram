{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","utils","beforeEach","t","dbName","v4","db","setup","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","userId","id","publicId","encode","truthy","createdAt","likeImage","result","throws","images","getImages","saveImages","map","img","Promise","all","length","saveUser","user","getUser","plainPassword","password","username","email","name","encrypt","authenticate","success","fail","failture","getImagesByUser","random","Math","round","i","push","getImagesByTag","tag"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst fixtures = require('./fixtures')\nconst utils = require('../lib/utils')\n\n// ESTE TEST SE EJECUTA PRIMERO QUE TODOS LOS DEMAS Y SE ENCARGA DE:\n// CREAR LA BASE DE DATOS Y ASIGNARLA A NUESTRO CONTEXTO PARA POSTEERIORMENTE SER UTILIZADA POR LOS DEMAS TEST\ntest.beforeEach('setup database', async t => {\n  const dbName = `pixelgram_${uuid.v4()}`\n  const db = new Db({db: dbName, setup: true})\n  await db.connect()\n  t.context.db = db\n  t.context.dbName = dbName\n  t.true(db.connected, 'should be connected')\n})\n\n// ESTE TEST SE EJECUTA SIEMPRE (POR ESO LE PONEMOS EL ALWAYS) DESPUES DE CADA TEST Y SE ENCARGA DE:\n// DESCONECTARNOS DE LA DB Y ELIMINAR TODO LO QUE HAYA SIDO ALMACENADO EN LA MISMA\ntest.afterEach.always('clean up database', async t => {\n  let db = t.context.db\n  let dbName = t.context.dbName\n\n  await db.disconnect()\n  t.false(db.connected, 'should be disconected')\n\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDA DE:\n// EL GUARDADO DE UNA IMAGEN EN LA DB\n// AL MISMO TIEMPO ESTRAE LOS TAGS DE LA DESCRIPCION CON LA UTILERIA QUE DESARROLLAMOS\ntest('save image', async t => {\n  let db = t.context.db\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\n\n  // traer una imagen de prueba\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, ['awesome', 'tags', 'pixel'])\n  t.is(created.userId, image.userId)\n  t.is(typeof created.id, 'string')\n  t.is(created.publicId, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// EL LIKE HACIA UNA IMAGEN\ntest('like image', async t => {\n  let db = t.context.db\n  t.is(typeof db.likeImage, 'function', 'like image is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.likeImage(created.publicId)\n\n  t.true(result.liked)\n  t.is(result.likes, image.likes + 1)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA OBTENCION DE UNA IMAGEN DE LA DB\n// VALIDAMOS QUE LA IMAGEN EXISTA\ntest('get image', async t => {\n  let db = t.context.db\n  t.is(typeof db.getImage, 'function', 'get image is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.getImage(created.publicId)\n\n  t.deepEqual(created, result)\n\n  await t.throws(db.getImage('foo'), /not found/)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA OBTENCION DE UNA LISTA DE IMAGENES DE LA BD\ntest('list all images', async t => {\n  let db = t.context.db\n  let images = fixtures.getImages(3)\n\n  let saveImages = images.map(img => db.saveImage(img))\n\n  let created = await Promise.all(saveImages)\n  let result = await db.getImages()\n\n  t.is(created.length, result.length)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// EL GUARDADO DE UN USUARIO EN LA DB\n// AL MISMO TIEMPO SE HACE USO DE LA UTILERIA PARA ENCRIPTAR PASSWORD\ntest('save user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.saveUser, 'function', 'save user is a function')\n\n  let user = fixtures.getUser()\n  let plainPassword = user.password\n  let created = await db.saveUser(user)\n\n  t.is(user.username, created.username)\n  t.is(user.email, created.email)\n  t.is(user.name, created.name)\n  t.is(utils.encrypt(plainPassword), created.password)\n  t.is(typeof created.id, 'string')\n  t.truthy(created.createdAt)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA OBTENCION DE UN USUARIO DE LA DB\n// VALIDAMOS QUE EL USUARIO EXISTA\ntest('get user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getUser, 'function', 'get user is a function')\n\n  let user = fixtures.getUser()\n  let created = await db.saveUser(user)\n  let result = await db.getUser(user.username)\n\n  t.deepEqual(created, result)\n\n  await t.throws(db.getUser('foo'), /not found/)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA AUTENTICACON DE UN USUARIO\n// VALIDAMOS QUE EL USUARIO EXISTA\ntest('authenticate user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.authenticate, 'function', 'authenticate is a fucntion')\n\n  let user = fixtures.getUser()\n  let plainPassword = user.password\n  await db.saveUser(user)\n\n  let success = await db.authenticate(user.username, plainPassword)\n  t.true(success)\n\n  let fail = await db.authenticate(user.username, 'foo')\n  t.false(fail)\n\n  let failture = await db.authenticate('foo', 'bar')\n  t.false(failture)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LISTAR IMAGENES POR USUUARIO\ntest('list images by user', async t => {\n  let db = t.context.db\n  t.is(typeof db.getImagesByUser, 'function', 'getImagesByUser is a function')\n\n  // crear imagenes de prueba\n  let images = fixtures.getImages(10)\n  // crear un id para hacer el filtro\n  let userId = uuid.uuid()\n  // asignar ese id a un numero aleatorio de imagenes generadas en el paso anterior\n  let random = Math.round(Math.random() * images.length)\n\n  let saveImages = []\n\n  for (let i = 0; i < images.length; i++) {\n    if (i < random) {\n      images[i].userId = userId\n    }\n    saveImages.push(db.saveImage(images[i]))\n  }\n\n  // resolver el arreglo de promesas(almacenarlas en la db)\n  await Promise.all(saveImages)\n\n  // obtener las images del usuario\n  let result = await db.getImagesByUser(userId)\n  // verificar que el resultado sea igual al numero de imagenes generadas a eses usuario\n  t.is(result.length, random)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n//  LISTAR IMAGENES POR TAG\ntest('list images by tag', async t => {\n  let db = t.context.db\n  t.is(typeof db.getImagesByTag, 'function', 'getImagesByTag is a function')\n\n  // crear imagenes de prueba\n  let images = fixtures.getImages(10)\n  // crear un id para hacer el filtro\n  let tag = '#filterit'\n  // asignar ese tag a un numero aleatorio de imagenes generadas en el paso anterior\n  let random = Math.round(Math.random() * images.length)\n\n  let saveImages = []\n\n  for (let i = 0; i < images.length; i++) {\n    if (i < random) {\n      images[i].description = tag\n    }\n    saveImages.push(db.saveImage(images[i]))\n  }\n\n  // resolver el arreglo de promesas(almacenarlas en la db)\n  await Promise.all(saveImages)\n\n  // obtener las images del usuario\n  let result = await db.getImagesByTag(tag)\n  // verificar que el resultado sea igual al numero de imagenes generadas a eses usuario\n  t.is(result.length, random)\n})\n"]}