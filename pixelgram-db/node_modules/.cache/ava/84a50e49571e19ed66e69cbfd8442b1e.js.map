{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","utils","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","id","public_id","encode","truthy","createdAt","likeImage","result","throws","images","getImages","saveImages","map","img","Promise","all","length","saveUser","user","getUser","plainPassword","password","username","email","name","encrypt","authenticate","success","fail","failture"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst fixtures = require('./fixtures')\nconst utils = require('../lib/utils')\n\n// ESTE TEST SE EJECUTA PRIMERO QUE TODOS LOS DEMAS Y SE ENCARGA DE:\n// CREAR LA BASE DE DATOS Y ASIGNARLA A NUESTRO CONTEXTO PARA POSTEERIORMENTE SER UTILIZADA POR LOS DEMAS TEST\ntest.beforeEach('setup database', async t => {\n  const dbName = `pixelgram_${uuid.v4()}`\n  const db = new Db({db: dbName})\n  await db.connect()\n  t.context.db = db\n  t.context.dbName = dbName\n  t.true(db.connected, 'should be connected')\n})\n\n// ESTE TEST SE EJECUTA SIEMPRE (POR ESO LE PONEMOS EL ALWAYS) DESPUES DE CADA TEST Y SE ENCARGA DE:\n// DESCONECTARNOS DE LA DB Y ELIMINAR TODO LO QUE HAYA SIDO ALMACENADO EN LA MISMA\ntest.afterEach.always('clean up database', async t => {\n  let db = t.context.db\n  let dbName = t.context.dbName\n\n  await db.disconnect()\n  t.false(db.connected, 'should be disconected')\n\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDA DE:\n// EL GUARDADO DE UNA IMAGEN EN LA DB\n// AL MISMO TIEMPO ESTRAE LOS TAGS DE LA DESCRIPCION CON LA UTILERIA QUE DESARROLLAMOS\ntest('save image', async t => {\n  let db = t.context.db\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\n\n  // traer una imagen de prueba\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, ['awesome', 'tags', 'pixel'])\n  t.is(created.user_id, image.user_id)\n  t.is(typeof created.id, 'string')\n  t.is(created.public_id, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// EL LIKE HACIA UNA IMAGEN\ntest('like image', async t => {\n  let db = t.context.db\n  t.is(typeof db.likeImage, 'function', 'like image is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.likeImage(created.public_id)\n\n  t.true(result.liked)\n  t.is(result.likes, image.likes + 1)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA OBTENCION DE UNA IMAGEN DE LA DB\ntest('get image', async t => {\n  let db = t.context.db\n  t.is(typeof db.getImage, 'function', 'get image is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.getImage(created.public_id)\n\n  t.deepEqual(created, result)\n\n  t.throws(db.getImage('foo'), /not found/)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA OBTENCION DE UNA LISTA DE IMAGENES DE LA BD\ntest('list all images', async t => {\n  let db = t.context.db\n  let images = fixtures.getImages(3)\n\n  let saveImages = images.map(img => db.saveImage(img))\n\n  let created = await Promise.all(saveImages)\n  let result = await db.getImages()\n\n  t.is(created.length, result.length)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// EL GUARDADO DE UN USUARIO EN LA DB\n// AL MISMO TIEMPO SE HACE USO DE LA UTILERIA PARA ENCRIPTAR PASSWORD\ntest('save user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.saveUser, 'function', 'save user is a function')\n\n  let user = fixtures.getUser()\n  let plainPassword = user.password\n  let created = await db.saveUser(user)\n\n  t.is(user.username, created.username)\n  t.is(user.email, created.email)\n  t.is(user.name, created.name)\n  t.is(utils.encrypt(plainPassword), created.password)\n  t.is(typeof created.id, 'string')\n  t.truthy(created.createdAt)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA OBTENCION DE UN USUARIO DE LA DB\ntest('get user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getUser, 'function', 'get user is a function')\n\n  let user = fixtures.getUser()\n  let created = await db.saveUser(user)\n  let result = await db.getUser(user.username)\n\n  t.deepEqual(created, result)\n\n  await t.throws(db.getUser('foo'), /not found/)\n})\n\n// ESTE TEST SIRVE PARA PROBAR LA FUNCIONALIDAD DE:\n// LA AUTENTICACON DE UN USUARIO\ntest('authenticate user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.authenticate, 'function', 'authenticate is a fucntion')\n\n  let user = fixtures.getUser()\n  let plainPassword = user.password\n  await db.saveUser(user)\n\n  let success = await db.authenticate(user.username, plainPassword)\n  t.true(success)\n\n  let fail = await db.authenticate(user.username, 'foo')\n  t.false(fail)\n\n  let failture = await db.authenticate('foo', 'bar')\n  t.false(failture)\n})\n"]}